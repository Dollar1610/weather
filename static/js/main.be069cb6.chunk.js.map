{"version":3,"sources":["components/WeatherItem/WeatherItem.js","containers/WeatherPage/index.js","App.js","serviceWorker.js","containers/WeatherPage/constants.js","containers/WeatherPage/reducer.js","containers/WeatherPage/action.js","containers/WeatherPage/sagas/loadData.js","containers/WeatherPage/saga.js","index.js"],"names":["DayWeather","props","react_default","a","createElement","className","concat","item","weather","dayWeek","dayMonth","month","tempDay","tempNight","src","icon","alt","WeatherPage","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","data","activeTab","toggle","bind","assertThisInitialized","tab","setState","_this2","weatherData","console","log","reactstrap_es","tabs","classnames","active","onClick","tabId","map","React","PureComponent","connect","get","dispatch","onRequestWeather","App","src_containers_WeatherPage","Component","Boolean","window","location","hostname","match","GET_WEATHER_DATA","LOADING","initialState","fromJS","WeatherData","loading","getWeatherData","type","loadData","c","i","regenerator_default","wrap","_context","prev","next","fetch","then","response","json","list","sent","length","Date","dt_txt","getDate","toLocaleString","toLocaleTimeString","weekday","replace","Math","round","main","temp_max","temp_min","abrupt","put","t0","error","stop","_marked","defaultSaga","saga_marked","sagaMiddleWare","createSagaMiddleWare","reduxDevTools","__REDUX_DEVTOOLS_EXTENSION__","store","createStore","arguments","undefined","action","set","compose","applyMiddleware","run","ReactDOM","render","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.be069cb6.chunk.js","sourcesContent":["import React from 'react';\nimport './index.scss';\n\nexport default function DayWeather(props) {\n  return (\n    <div className={`weather-item weather-item--${props.item.weather}`}>\n      <div className=\"weather-item-date\">\n        <div className=\"weather-item-date-week\">\n          <span>{props.item.dayWeek}</span>\n        </div>\n        <div className=\"weather-item-date-month\">\n          <span>{`${props.item.dayMonth} ${props.item.month}`}</span>\n        </div>\n      </div>\n      <div className=\"weather-item-value\">\n        <div className=\"weather-item-value-temp\">\n          <span>{props.item.tempDay}<sup><small>0</small></sup>{`/${props.item.tempNight}`}</span>\n        </div>\n        <img src={`http://openweathermap.org/img/w/${props.item.icon}.png`} alt=\"\"  /> \n      </div>\n    </div>\n  );\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { TabContent, TabPane, Nav, NavItem, NavLink, Container } from 'reactstrap';\nimport WeatherItem from '../../components/WeatherItem/WeatherItem';\nimport classnames from 'classnames';\nimport './index.scss';\n\nclass WeatherPage extends React.PureComponent {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: {},\n      activeTab: '1',\n    };\n    this.toggle = this.toggle.bind(this);\n  }\n  toggle(tab) {\n    if (this.state.activeTab !== tab) {\n      this.setState({\n        activeTab: tab\n      });\n    }\n  }\n\n  render() {\n    const weatherData = this.props.WeatherPage;\n    const items = [1,2,3];\n    console.log(weatherData);\n    return (\n      <div className=\"weather-page\">\n        <div className=\"weather-page__body\">\n        <Container>\n        <Nav tabs>\n          <NavItem>\n            <NavLink\n              className={classnames({ active: this.state.activeTab === '1' })}\n              onClick={() => { this.toggle('1'); }}\n            >\n              Today\n            </NavLink>\n          </NavItem>\n          <NavItem>\n            <NavLink\n              className={classnames({ active: this.state.activeTab === '2' })}\n              onClick={() => { this.toggle('2'); }}\n            >\n              Week\n            </NavLink>\n          </NavItem>\n        </Nav>\n        </Container>\n        <TabContent activeTab={this.state.activeTab}>\n          <TabPane tabId=\"1\">\n          {weatherData.map(item => (\n             <WeatherItem item={item} />\n          ))}\n          </TabPane>\n        </TabContent>\n        <TabContent activeTab={this.state.activeTab}>\n          <TabPane tabId=\"2\">\n            <Container>\n            {items.map(item => (\n             999\n            ))}\n            </Container>\n          </TabPane>\n        </TabContent>\n        </div>\n      </div>\n    );\n  }\n}\n\nWeatherPage.propTypes = {\n  WeatherPage: PropTypes.object,\n};\n\nconst mapStateToProps = state => {\n  return ({\n    WeatherPage: state.get('WeatherData'),\n  })\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onRequestWeather: () => dispatch()\n  };\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(WeatherPage);\n","import React, { Component } from 'react';\nimport WeatherPage from '../src/containers/WeatherPage/index';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <WeatherPage />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","export const DEFAULT_ACTION = 'app/WeatherPage/DEFAULT_VALUE';\nexport const GET_WEATHER_DATA = 'app/WeatherPage/GET_WEATHER_DATA';\nexport const LOADING = 'app/WeatherPage/LOADING';\n","import { fromJS } from 'immutable';\nimport { GET_WEATHER_DATA, LOADING } from './constants';\n\nconst initialState = fromJS({\n  WeatherData : {},\n  loading: false,\n});\n\nexport function WeatherPageReducer(state = initialState, action) {\n  switch (action.type) {\n    default:\n      return state;\n    case GET_WEATHER_DATA:\n      return state.set('WeatherData', action.data);\n    case LOADING:\n      return state.set('loading', action.data);\n  }\n}","import { DEFAULT_ACTION, GET_WEATHER_DATA, LOADING } from './constants';\n\nexport function defaultAction() {\n  return {\n    type: DEFAULT_ACTION,\n  };\n}\n\nexport function loading(data) {\n  return {\n    type: LOADING,\n    data,\n  }\n}\n\nexport function getWeatherData(data) {\n  return {\n    type: GET_WEATHER_DATA,\n    data,\n  };\n}","import { put } from 'redux-saga/effects';\nimport { getWeatherData } from '../action';\n\nfunction* loadData() {\n  try {\n    const data = yield fetch('http://api.openweathermap.org/data/2.5/forecast?id=524901&APPID=bfc2d22bb5800afd064cd85e587bc7dc')\n      .then((response => response.json())).then(data => data.list)\n    let weatherData = [];\n    let c = 1;\n    for (let i = 0; i < data.length; i += 1) {\n      weatherData[i] = {\n        dayMonth: `${new Date(data[c].dt_txt).getDate()}`,\n        month: new Date().toLocaleString('eng', { month: 'short' }),\n        dayWeek: new Date(data[c].dt_txt).toLocaleTimeString('eng', {weekday: 'long'}).replace(/ [\\s\\S]+/, ''),\n        tempDay: Math.round(data[c].main.temp_max - 273.15),\n        tempNight: Math.round(data[c].main.temp_min - 273.13),\n        icon: data[c].weather[0].icon,\n        weather: data[c].weather[0].main,\n      }\n      c += 8;\n      if (c > data.length) break;\n    }\n    console.log(data);\n    yield put(getWeatherData(weatherData));\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nexport default loadData;\n","import { call } from 'redux-saga/effects';\nimport loadData from './sagas/loadData';\n\nexport function* defaultSaga() {\n  yield call(loadData);\n}\n\nexport default [defaultSaga];\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport * as serviceWorker from './serviceWorker';\n\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport createSagaMiddleWare from 'redux-saga';\nimport { Provider } from 'react-redux';\n\nimport { WeatherPageReducer } from '../src/containers/WeatherPage/reducer';\nimport { defaultSaga } from './containers/WeatherPage/saga';\n\nconst sagaMiddleWare = createSagaMiddleWare();\n\nconst reduxDevTools = window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__();\n\nlet store = createStore(WeatherPageReducer, compose(applyMiddleware(sagaMiddleWare), reduxDevTools));\n\nsagaMiddleWare.run(defaultSaga);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}